// This is a sample of the com.tibco.ep.streambase.configuration.sbengine.StreamBaseEngine configuration containing all
// possible properties. The contents as presented are not valid; uncomment and replace sample values with valid values
// as needed.

name = "sbengineDeployment"
type = "com.tibco.ep.streambase.configuration.sbengine"
version = "1.0.0"
configuration = {
	EventFlowDeployment = {
		containers = {
			containerA={
				moduleName=${moduleName:-com.lgu.cep.cepsb2sbtester.CEPSB2SBTester}
			}
//			containerB={
//				moduleName=${moduleName:-com.lgu.cep.lbtester.SBInputAdapter}
//			}
//			containerC={
//				moduleName=${moduleName:-com.lgu.cep.lbtester.SBInputAdapter2}
//			}
		}
	}
	
	// An EventFlow engine configuration object includes JVM-level settings as well as engine-wide settings specific to
	// EventFlow such as operator parameters, custom function definitions, and engine tuning parameters.
	StreamBaseEngine = {
		streamBase = {
			operatorParameters={
				target-url=${target-url:-localhost}
			}
		}

		// Configuration types that have affinity with particular engines can use this array to associate themselves with
		// particular engines. Each element is an engine name or a regular expression matching zero or more engine names. A
		// null value means that the instance uses default engine association. Use of this property is recommended only when
		// manually loading configurations via the node management command line tool or API; affinity for configurations in
		// fragment archives is automatically defaulted during node installation. This key is optional and has no default
		// value.
		//associatedWithEngines = [ "sample-engine-identifier" ]

		// Jar files and class hierarchies to add to the application fragment's class path. This key is intended for
		// application fragments that use common external Java libraries, for example JDBC drivers. Paths are required to be
		// absolute and in Java (forward-slash separator) format. This key is optional and has no default value.
		//externalClassPath = [ "/a/sample/external/library-1.jar", "/a/sample/external/library-2.jar" ]

		// An associative array specifying native libraries to add to the engine's library search path. Keys are O/S codes,
		// one of 'macos_x86_64', 'linux_x86_64', or 'windows_x86_64'. Values are arrays of library paths. Paths are required
		// to be absolute and can be in in the format appropriate for their O/S. This key is intended for use by application
		// fragments that use external native libraries. This key is optional and has no default value.
		//externalNativeLibraryPath = {
			//windows_x86_64 = [ "c:\a\sample\external\native\library-1.dll", "c:\a\sample\external\native\library-2.dll" ]
		//}

		// A list of JVM arguments used in each engine that uses this configuration. This key is optional and has no default
		// value.
		//jvmArgs = [ "-Xmx1024m", "-Xms512m" ]

		// Various JVM-level tuning parameters for the StreamBase runtime.
		//jvmTuning = {

			// Maximum number of dispatch threads. This key is optional and its default value is 2000.
			//maximumDispatchThreads = 2000

			// Minimum number of dispatch threads. This key is optional and its default value is 10.
			//minimumDispatchThreads = 10

			// The scheduling policy for the JVM process. The valid values for the policy are 'SCHED_FIFO', 'SCHED_RR', and
			// 'SCHED_OTHER'. This key is optional and its default value is O/S-specific.
			//schedulerPolicy = "SCHED_RR"

			// The scheduling priority for the JVM process. The valid range for priority depends on the policy; for Linux the
			// valid values for 'SCHED_FIFO' and 'SCHED_RR' are 1 - 99. This key is optional and its default value is
			// O/S-specific.
			//schedulerPriority = 42

			// Maximum time in seconds to wait for an engine to shut down before aborting it. This key is optional and its value
			// is 60.
			//shutdownTimerSeconds = 60

			// Number of timers that can be executing concurrently. This key is optional and its default value is 1.
			//timerParallelism = 1

			// The maximum timer resolution. This is the interval at which timers are examined. Higher resolution timers have
			// more impact on system performance. This key is optional and its default value is 1000.
			//timerResolutionMilliseconds = 1000
		//}

		// EventFlow-specific engine configuration. This key is optional and if it is not present, defaults are set according
		// to the defaults of the contained types.
		//streamBase = {

			// Configures how long to wait for mandatory artifacts from the Artifact Management Server (AMS) before aborting
			// engine startup. Operators use the com.tibco.ep.sb.ads.OperatorArtifactManager class to register for artifacts used
			// by the operator. If the operator specifies that an artifact must exist before the operator is started then this
			// field configures how long to wait for the artifact from the AMS before aborting engine startup.This key is
			// optional and its default value is 20000.
			//artifactWaitTimeoutMilliseconds = 20000

			// A path to an engine specific data area. This data area is used by operators, adapters, and other services to store
			// data. The path can be absolute or relative. Relative paths are relative to an engine's fragment directory. This
			// path is created if it does not exist. If the path cannot be created or accessed, configuration audit will fail.
			// This path can be changed at runtime by replacing a configuration with a new data area. This location is never
			// removed even if the data area is changed by replacing configuration, or the configuration is deactivated and
			// removed. This field is optional and has a default value of 'engine-data-area'.
			//dataAreaPath = "engine-data-area"

			// Configures the EventFLow engine's monitoring subsystem.
			//engineMonitor = {

				// Enable or disable engine monitoring. This value must be set to 'true' to use the engine monitor. This key is
				// optional and its default value is true.
				//enabled = true

				// The frequency with which monitoring statistics are produced. This key is optional and its default value is 1000.
				//statsFrequencyMilliseconds = 1000
			//}

			// The default handling for runtime errors is to discard the error-producing event and continue with processing. The
			// error-handler key can be used to configure the behavior. This key is optional and has no default value.
			//errorHandler = {

				// This exception is caused by a variety of problems, including errors that occur when evaluating expressions or
				// when flushing disk-based query table logs, and incorrect timestamp formats. Continuing after such errors is not
				// recommended. Valid values for this error type are 'shutdown', 'continue', or 'ignore'.
				//evalError = "shutdown"

				// Java plugins can get eval-plugin-error exceptions for a variety of reasons, including TupleExceptions, errors,
				// and when setting parameters. Continuing after such errors is not recommended. Valid values for this error type
				// are 'shutdown', 'continue', or 'ignore'.
				//evalPluginError = "shutdown"

				// The Gather operator throws this error when an order by field value is null. The Aggregate operator throws it when
				// an order by field value is null or the current value is less then a previous value. Valid values for this error
				// type are 'shutdown', 'continue', or 'ignore'.
				//orderingError = "continue"
			//}

			// Set to true to force high resolution timers, at the expense of performance. This key is optional and its default
			// value is false.
			//forceHighResolutionTimer = false

			// The EventFlow engine's default behavior is to fail typechecking when an unbound capture is detected. An unbound
			// capture occurs when an input stream of a module is implemented with a capture field and that input stream is not
			// connected to an input port of the calling Module Reference in the parent application. This situation results in an
			// error because there is no schema to examine or fields to capture for the unbound capture instance. When you are
			// certain your unbound captures are benign, you can optionally suppress the resulting typecheck errors. To do this,
			// set this key to true. This key is optional and its default value is false.
			//ignoreUnboundCaptures = false

			// The implementation to use for calls to now(). The valid values are 'system' or 'thread'. 'System' uses uses Java's
			// System.currentTimeMillis() call. 'Thread' uses a background thread that checks the time approximately every
			// millisecond. This option will result in decreased accuracy, but may be more efficient than system if you call
			// now() more frequently than 1000 times per second. This key is optional and its default value is 'system'.
			//nowImplementation = "system"

			// Each Java Operator changes state along with the engine process as a whole. The engine waits for each Operator to
			// change state before it completes its state change. The value of this key is the amount of time the engine will
			// wait before timing out the Operator. If an Operator is timed out on a state change, the engine shuts the Operator
			// down and proceeds with the state change. This key is optional and its default value is 10000.
			//operatorStateChangeTimeoutMilliseconds = 10000

			// Engine-wide configuration settings for parallel region queues.
			//parallelRegionQueues = {

				// The data distribution policy to use for parallel region queues. This key is only valid if the parallel region in
				// question uses transactional memory for storage, in which case it enables high availability of that storage. Its
				// value must be a valid data distribution policy as declared in your application configuration. This key is
				// optional and has no default value. If it is not set, then high availability for this region's queues is not
				// enabled.
				//defaultDataDistributionPolicy = "my-distribution-policy"

				// The initial buffer size for a parallel region queue to use. Must be a power of two. These buffers can grow, so
				// setting this is not actually necessary. This key is optional and its default value is 16.
				//defaultInitialBufferSize = 16

				// The maximum queue size in tuples for a parallel region queue. This must be a power of 2. This key is optional and
				// its default value is 2**30.
				//defaultMaxBufferSize = 1073741824

				// The number of tuples to process from a parallel region queue before blocking the caller. This key is optional and
				// its default value is zero, meaning unlimited.
				//defaultMaxOutstandingTuples = 0

				// The maximum batch size in tuples to process from a parallel region queue at once. This key is optional and its
				// default value is zero, meaning unlimited.
				//defaultMaxProcessingBatchSize = 0

				// The default storage method to use for all parallel region queues. Valid values are 'HEAP' or
				// 'TRANSACTIONAL_MEMORY'. This key is optional and its default value is 'HEAP'.
				//defaultStorageMethod = "HEAP"

				// The default wait strategy used by the disruptor that controls parallel region queues. Valid values are
				// 'BLOCKING', 'BUSY_SPIN', 'SLEEPING', and 'YIELDING'. This key is optional and its default value is 'BLOCKING'.
				//defaultWaitStrategy = "BLOCKING"

				// Drain all parallel region queues before shutdown. This key is optional and its default value is true.
				//drainBeforeShutdown = true

				// The time in milliseconds to wait for a parallel region queue to have space, before expanding it. This key is
				// optional and its default value is 1000.
				//expansionDelayMilliseconds = 1000

				// When a parallel region queue expansion has to wait, report the wait time if above this threshold in milliseconds.
				// A value of zero means don't report. This key is optional and its default value is zero.
				//expansionDelayReportThresholdMilliseconds = 1000

				// The percentage of total memory to allow a parallel region queue to take up, before switching to blocking and
				// linear growth. This value only applies to queues that use heap memory for storage. This key is optional and its
				// default value is one percent.
				//perQueueHeapMemoryThresholdPercent = 1
			//}

			// The maximum size of a stream's schema; that is, the total number of bytes of all fields you expect in the tuple.
			// While there is no theoretical upper limit, in practice there is a maximum based on the available memory on the
			// machines that will host the processing of your application. Be cautious about creating very large schemas, because
			// applications that move smaller amounts of data perform much better than applications that move tuples containing
			// unnecessary fields. You can use HOCON power-of-ten or power-of-two suffixes like kB, MB, K, or M as an
			// abbreviation. This key is optional and its default value is 1M bytes.
			//schemaMaxSize = "1M"

			// Configures settings related to the time service.
			//timeService = {

				// Time service type, one of 'CONTROLLABLE' or 'WALLCLOCK'. 'WALLCLOCK' uses the system clock internally.
				// 'CONTROLLABLE' can be initialized to a specific start time using the 'targetTime' key. This key is optional and
				// its default value is 'WALLCLOCK'.
				//type = "WALLCLOCK"
			//}
		//}

		// An associative array of Java system properties that will be set in each engine that uses this configuration.
		// Property names containing dots must be surrounded with double quotes. This key is optional and has no default
		// value.
		//systemProperties = {
			//SAMPLE_SYSTEM_PROPERTY_0 = "SAMPLE_SYSTEM_PROPERTY_VALUE"
		//}
	}
}